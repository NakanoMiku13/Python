# -*- coding: utf-8 -*-
"""Clasificador de imágenes

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qEE4cOwjpqrv0H0gixA4M4zHyCr5pSeI
"""

import tensorflow as tf
import tensorflow_datasets as tfds
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.pyplot as plt
import math
import matplotlib.pyplot as plt
datos, metadatos = tfds.load('fashion_mnist',as_supervised=True,with_info=True)

metadatos

datos_entrenamiento, datos_pruebas = datos['train'],datos['test']

nombres_clases = metadatos.features['label'].names

#Normalizar los datos (Pasar de 0 - 255)
def normalizar(imagenes,etiquetas):
  imagenes = tf.cast(imagenes,tf.float32)
  imagenes /= 255 #Aquí pasamos de 0-255 a 0-1
  return imagenes, etiquetas

#Normalizar los datos de entrenaiento y pruebas con la función que hicimos
datos_entrenamiento = datos_entrenamiento.map(normalizar)
datos_pruebas = datos_pruebas.map(normalizar)

#Agregar datos a caché (usamos memoria en vez de disco)
datos_entrenamiento = datos_entrenamiento.cache()
datos_pruebas = datos_pruebas.cache()

nombres_clases


for imagen, etiqueta in datos_entrenamiento.take(1):
  break
imagen = imagen.numpy().reshape((28,28)) 

plt.figure()
plt.imshow(imagen,cmap=plt.cm.binary)
plt.colorbar()
plt.grid(False)
plt.show()

plt.figure(figsize=(10,10))
for i, (imagen, etiqueta) in enumerate(datos_entrenamiento.take(25)):
  imagen = imagen.numpy().reshape((28,28))
  plt.subplot(5,5,i+1)
  plt.xticks([])
  plt.yticks([])
  plt.grid(False)
  plt.imshow(imagen, cmap=plt.cm.binary)
  plt.xlabel(nombres_clases[etiqueta])
plt.show()

#Crear modelo
modelo = tf.keras.Sequential(
    [
     tf.keras.layers.Flatten(input_shape=(28,28,1)),
     tf.keras.layers.Dense(50,activation=tf.nn.relu),
     tf.keras.layers.Dense(50,activation=tf.nn.relu),
     tf.keras.layers.Dense(10,activation=tf.nn.softmax) #Para redes de clasificación
    ]
)

#Compilar Modelo

modelo.compile(
    optimizer='adam',
    loss=tf.keras.losses.SparseCategoricalCrossentropy(),
    metrics=['accuracy']
)

num_ej_entrenamiento = metadatos.splits["train"].num_examples
num_ej_pruebas = metadatos.splits["test"].num_examples

print(num_ej_entrenamiento)
print(num_ej_pruebas)

tamano_lote=128
datos_entrenamiento=datos_entrenamiento.repeat().shuffle(num_ej_entrenamiento).batch(tamano_lote)
datos_pruebas=datos_pruebas.batch(tamano_lote)


#Entrenar
historial = modelo.fit(datos_entrenamiento,epochs=600,steps_per_epoch=math.ceil(num_ej_entrenamiento/tamano_lote))


plt.xlabel("# Epoca")
plt.ylabel("Magnitud de pérdida")
plt.plot(historial.history["loss"])


for imagenes_prueba, etiquetas_prueba in datos_pruebas.take(1):
  imagenes_prueba=imagenes_prueba.numpy()
  etiquetas_prueba = etiquetas_prueba.numpy()
  predicciones = modelo.predict(imagenes_prueba)

def graficarImagen(i,arr_predicciones,etiquetas_reales,imagenes):
  arr_predicciones, etiqueta_real, img = arr_predicciones[i],etiquetas_reales[i],imagenes[i]
  plt.grid(False)
  plt.xticks([])
  plt.yticks([])
  plt.imshow(img[...,0],cmap=plt.cm.binary)
  etiqueta_prediccion = np.argmax(arr_predicciones)
  if etiqueta_prediccion == etiqueta_real:
    color= 'blue' #si es correcto
  else:
    color = 'red' #si es incorrecto
  plt.xlabel("{} {:2.0f}% ({})".format(nombres_clases[etiqueta_prediccion],
                                100*np.max(arr_predicciones),
                                nombres_clases[etiqueta_real]),
                                color=color)
def graficarValorArreglo(i,arr_predicciones,etiqueta_real):
  arr_predicciones,etiqueta_real=arr_predicciones[i],etiqueta_real[i]
  plt.grid(False)
  plt.xticks([])
  plt.yticks([])
  grafica=plt.bar(range(10),arr_predicciones,color="#777777")
  plt.ylim([0,1])
  etiqueta_prediccion = np.argmax(arr_predicciones)
  grafica[etiqueta_prediccion].set_color('red')
  grafica[etiqueta_real].set_color('blue')
filas=5
columnas=5
num_imagenes = filas*columnas
plt.figure(figsize=(2*2*columnas,2*filas))
for i in range(num_imagenes):
  plt.subplot(filas,2*columnas,2*i+1)
  graficarImagen(i,predicciones,etiquetas_prueba,imagenes_prueba)
  plt.subplot(filas,2*columnas,2*i+2)
  graficarValorArreglo(i,predicciones,etiquetas_prueba)
plt.show()
